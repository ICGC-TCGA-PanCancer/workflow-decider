.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PCAP::Bam 3"
.TH PCAP::Bam 3 "2014-04-14" "perl v5.14.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
PCAP::Bam \- Methods that process BAM files
.SS "Object Methods"
.IX Subsection "Object Methods"
.IP "new" 4
.IX Item "new"
.Vb 1
\&  my $bam = PCAP::Bam\->new($bam_file);
.Ve
.Sp
Generate a \s-1BAM\s0 object to allow access to object based functions.  Primarily added to allow efficient
access to header information without re-parsing once populated.
.IP "read_group_info" 4
.IX Item "read_group_info"
.Vb 1
\&  my $rg_data = $bam\->read_group_info($required_tags);
.Ve
.Sp
Returns an arrayref (one entry per readgroup) of hashes where the keys are the \s-1RG\s0 tags found in the \f(CW@RG\fR header line.
Providing an arrayref of required_tags causes an error to be raised if any are not found:
.Sp
.Vb 1
\&  my $rg_data = $bam\->read_group_info([qw(CN LB SN)]);
.Ve
.Sp
Resulting data structure:
.Sp
.Vb 6
\&  [ { CN => \*(AqSI\*(Aq,
\&      LB => \*(AqLIBRARY_ID\*(Aq,
\&      SM => \*(AqSample_name},
\&    { CN => ...
\&    },
\&    ...];
.Ve
.IP "single_rg_value" 4
.IX Item "single_rg_value"
.Vb 1
\&  my $sample_name = $bam\->single_rg_value(\*(AqSM\*(Aq);
.Ve
.Sp
Gets the value of a single \s-1RG\s0 tag.  Errors if multiple readgroups detected.
.IP "check_for_tags" 4
.IX Item "check_for_tags"
.Vb 1
\&  $bam\->check_for_tags([list of required tags]);
.Ve
.Sp
Check that all readgroups in this \s-1BAM\s0 have the specified tags.
Errors if any are not detected.
.IP "check_paired" 4
.IX Item "check_paired"
.Vb 1
\&  $bam\->check_paired;
.Ve
.Sp
Will error if \s-1BAM\s0 file doesn't contain paired reads.
.IP "comments" 4
.IX Item "comments"
.Vb 1
\&  my @comments = @{$bam\->comments};
.Ve
.Sp
Returns an array ref of the value of each comment line.
\&'@CO\et' is pre-stripped.
.IP "sam_header" 4
.IX Item "sam_header"
.Vb 1
\&  my @header_lines = @{$bam\->sam_header};
.Ve
.Sp
Returns array ref of all header lines.  One entry perl line.
.SS "Non Object Methods"
.IX Subsection "Non Object Methods"
.IP "bam_to_grouped_bam" 4
.IX Item "bam_to_grouped_bam"
.Vb 1
\&  PCAP::Bam::bam_to_grouped_bam($index, $options);
.Ve
.Sp
Convert a \s-1BAM\s0 for a single readgroup to a readname grouped \s-1BAM\s0.
.Sp
.Vb 2
\&  index   \- Which element of the \*(Aqbams\*(Aq array reference found in options should be processed
\&              NOTE: index is origin 1
\&
\&  options \- Hashref, requires the following entries:
\&
\&          \-tmp  : working/output directory depending on application
\&          \-bams : array reference to a B<sorted> list of BAM files (to allow resume function)
.Ve
.Sp
On successful completion of a run a file is created in tmp/progress/bamcollate.$index.  If the
program is re-run without clearing of this progress folder the execution of the command is skipped.
.IP "merge_and_mark_dup" 4
.IX Item "merge_and_mark_dup"
.Vb 1
\&  PCAP::Bam::merge_and_mark_dup($options);
.Ve
.Sp
Takes a list of sorted \s-1BAM\s0 files, marks duplicates and produces single output \s-1BAM\s0 in one pass.
.Sp
.Vb 1
\&  options \- Hashref, requires the following entries:
\&
\&          \-tmp      : working/output directory depending on application
\&          \-bams     : array reference to a B<sorted> list of BAM files (for consistent results)
\&          \-outdir   : output files written to this folder
\&          \-sample   : prefix of output file
\&          \-threads  : Total threads available to process
\&
\&  returns \- path_to_marked_bam
.Ve
.Sp
Resulting data is of the form:
.Sp
.Vb 4
\&  $outdir/$sample.bam
\&  $outdir/$sample.bam.bai
\&  $outdir/$sample.bam.md5
\&  $outdir/$sample.met
.Ve
.IP "sample_name" 4
.IX Item "sample_name"
Takes \s-1BAM\s0 or Bio::DB::Sam object as input and returns the sample name found in the header.
.Sp
The \s-1SAM\s0 object is also returned should it be useful for other calls
.IP "rg_line_for_output" 4
.IX Item "rg_line_for_output"
Takes \s-1BAM\s0 or Bio::DB::Sam object as input and returns the string representation for the \s-1RG\s0 line.
Intended for use when adding \s-1RG\s0 to \s-1BWA\s0 \s-1MEM\s0 output and is only useful in single \s-1RG\s0 BAMs
.Sp
The \s-1SAM\s0 object is also returned should it be useful for other calls
.IP "sam_ob" 4
.IX Item "sam_ob"
.Vb 1
\&  my $sam_ob = sam_ob(\*(Aqfile.bam\*(Aq);
.Ve
.Sp
Generate a Bio::DB::Sam object from the provided \s-1BAM\s0 file.
