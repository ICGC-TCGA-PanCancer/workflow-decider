.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PCAP::SRA 3"
.TH PCAP::SRA 3 "2014-04-14" "perl v5.14.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SS "Methods"
.IX Subsection "Methods"
.IP "new" 4
.IX Item "new"
.Vb 3
\& my $sra = PCAP::SRA\->new($options\->{\*(Aqraw_files\*(Aq});
\&  # or when library type is not encoded in BAM headers
\& my $sra = PCAP::SRA\->new($options\->{\*(Aqraw_files\*(Aq}, $options\->{\*(Aqlibrary_type\*(Aq});
.Ve
.Sp
Create object and pre validate the input data.
.IP "populate_detail" 4
.IX Item "populate_detail"
Additional final checking of data structures, intent is to use this to generate tab output of
most of the fields for the tracking spreadsheet (once finalised).
.IP "validate_grouped_data" 4
.IX Item "validate_grouped_data"
Validates the input information via other methods, just plumbing.
.IP "validate_control" 4
.IX Item "validate_control"
Checks that the control/normal sample doesn't change within a donor.
.IP "parse_input" 4
.IX Item "parse_input"
Takes a list of files and converts into basic bam detail structure.
.IP "get_md5_from_file" 4
.IX Item "get_md5_from_file"
Pulls pre-calculated \s-1MD5\s0 from file co-located with \s-1BAM\s0 as *.md5
.IP "experiment_sets" 4
.IX Item "experiment_sets"
Generates the \s-1EXPERIMENT_SET\s0 component of experiment.xml
.IP "experiment" 4
.IX Item "experiment"
Generates the \s-1EXPERIMENT\s0 block for experiment.xml
.IP "sample_descriptor" 4
.IX Item "sample_descriptor"
Generates the \s-1SAMPLE_DESCRIPTOR\s0 block for experiment.xml
.IP "run_set" 4
.IX Item "run_set"
Generates the \s-1RUN_SET\s0 block for run.xml
.IP "run" 4
.IX Item "run"
Generates the \s-1RUN\s0 block for run.xml and linked \s-1EXPERIMENT_REF\s0 block
.IP "info_file_data" 4
.IX Item "info_file_data"
Adds any data to be added to \s-1ANALYSIS_ATTRIBUTES\s0 into the 'info' component of the bam_object.
.Sp
Data is pulled from bam header \f(CW@CO\fR field or alternatively from a *.info file co-located with the *.bam
.IP "analysis_xml" 4
.IX Item "analysis_xml"
Generates the full analysis.xml content.
.IP "analysis_attributes" 4
.IX Item "analysis_attributes"
Generates \s-1ANALYSIS_ATTRIBUTES\s0 block of analysis.xml
.IP "analysis_run_xml" 4
.IX Item "analysis_run_xml"
Generates the \s-1RUN\s0 \s-1XML\s0 element for analysis.xml
.IP "file_xml" 4
.IX Item "file_xml"
Generates the \s-1FILE\s0 \s-1XML\s0 element which is used in both analysis.xml and run.xml.
.IP "group_bams" 4
.IX Item "group_bams"
Group bam files by seq type, sample, library.
.IP "validate_seq_type" 4
.IX Item "validate_seq_type"
Checks sequencing type is of expected format/type.
.IP "uuid" 4
.IX Item "uuid"
Creates a lower-case uuid (\s-1GNOS\s0 preference)
.IP "create_cv_lookups" 4
.IX Item "create_cv_lookups"
Loads the pre-determined look up files for \s-1CV\s0 terms.
.IP "validate_info" 4
.IX Item "validate_info"
Checks any fields in the info block that match the name of \s-1CV\s0 terms against the valid values.
.IP "generate_sample_SRA" 4
.IX Item "generate_sample_SRA"
Generates a set of submission files for each of the grouped bams.
During processing also validates any fields known to have controlled vocab.
.IP "analysis_xml" 4
.IX Item "analysis_xml"
Generates the analysis.xml file content.
.Sp
Takes list of values in this order
.Sp
.Vb 3
\&  bam object (with info prepopulated)
\&  study_name
\&  aliquot_id from BAM RG header SM tag
.Ve
.IP "bash_script" 4
.IX Item "bash_script"
Takes output path and list of submission UUIDs.
.Sp
Generates a bash script that can be run to complete \s-1GNOS\s0 upload with resume capabilities.
