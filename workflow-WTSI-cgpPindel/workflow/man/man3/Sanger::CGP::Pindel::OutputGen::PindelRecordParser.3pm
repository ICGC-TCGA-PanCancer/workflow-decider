.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Sanger::CGP::Pindel::OutputGen::PindelRecordParser 3"
.TH Sanger::CGP::Pindel::OutputGen::PindelRecordParser 3 "2014-06-06" "perl v5.14.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
\&\f(CW@returns\fR \- a Sanger::CGP::Pindel::OutputGen::PindelRecord;
.PP
\&\f(CW@param1\fR record         \- a empty Sanger::CGP::Pindel::OutputGen::PindelRecord object.
.PP
\&\f(CW@param2\fR alignment      \- a string containing the pindel call header line.
.PP
\&\f(CW@param1\fR record    \- a empty Sanger::CGP::Pindel::OutputGen::PindelRecord object.
.PP
\&\f(CW@param2\fR alignment \- a string containing the pindel call header line.
.PP
\&\f(CW@param1\fR record         \- a Sanger::CGP::Pindel::OutputGen::PindelRecord object. This must have the following fields
                         filled in: type, idx, chro, start, ref_seq, alt_seq.
.PP
\&\f(CW@param2\fR alignment      \- an array-ref of pindel alignment strings.
.PP
\&\f(CW@param3\fR ref_line       \- a String_ref of the pindel reference string.
.PP
Takes the alignment string left and right components and attempts to resolve the number of repeats of the minimum change unit provided in the record.
.PP
\&\f(CW@param1\fR = record    \- a Sanger::CGP::Pindel::OutputGen::PindelRecord object. This must have the following fields
                      filled in: start, end, range_start, range_end, ref_seq, alt_seq, min_change.
.PP
\&\f(CW@param2\fR = ref_left  \- string_ref of the reference sequence before the change.
.PP
\&\f(CW@param3\fR = ref_right \- string_ref of the reference sequence after the change.
.PP
\&\f(CW@return\fR integer     \- the number of times the min_change is seen within the range coordinates of the record.
.PP
Loops through an array of alignment strings sub-stringing the variant out using the
offsets provided. The most prevalent variant is returned. This was used when a bug
existed in the Pindel output where the event was selected from the first read in
the alignment list. This has since been corrected in newer versions.
.PP
\&\f(CW@param1\fR = alignments \- an array ref of alignment strings
.PP
\&\f(CW@param2\fR = l_length \- the left hand offset of where the variant begins
.PP
\&\f(CW@param3\fR = c_length \- the right hand offset of where the variant ends
.PP
\&\f(CW@return\fR (max_change_string, change_fraction) \- the most prevalent change and its fraction of total reads at this loci
.PP
\&\s-1ATCATCATC\s0 shrinks to \s-1ATC\s0
\&\s-1ATCATCATCG\s0 will not shrink
.PP
Repeats upto \f(CW$max_repeat_unit_size\fR in length are looked for.
.PP
\&\f(CW@param1\fR = change               \- the change sequence to shrink.
.PP
\&\f(CW@param2\fR = max_repeat_unit_size \- the maximum repeat unit length.
.PP
\&\f(CW@returns\fR string \- the change string reduced to its repetative component
.PP
\&\f(CW@param1\fR record           \- a Sanger::CGP::Pindel::OutputGen::PindelRecord object. This must have the following fields
                           filled in: type, idx, chro, start, ref_seq, alt_seq.
.PP
\&\f(CW@param2\fR chro             \- The chromosome name.
.PP
\&\f(CW@param3\fR start_pos        \- The genomic start position of the event.
.PP
\&\f(CW@param4\fR read             \- string_ref of a pindel read string.
                           <paddingSEQvarSEQpadding	strand	genomic-start-of-anchor-read	mapq-qual-of-anchor-read	sample-name	\f(CW@read\fR\-name/read1|2>
                           (  TCCCCTaACAGTC   	+	1336638	37	\s-1COLO\-829\s0	\f(CW@EAS188_62:3:72:801:1263\fR/2 )
.PP
\&\f(CW@param5\fR ref_seq_length   \- length of the reference sequence associated with the event
.PP
\&\f(CW@param6\fR read_idx         \- the read identifier. This should be unique. This is used to form
                           part of the unique name of the read.
.PP
\&\f(CW@param7\fR change_ref_start \- this is the indicated start of the variant on the pindel record reference string and
                           is used to grab variant sequence from the read string.
.PP
\&\f(CW@param8\fR change_ref_end   \- this is the indicated end of the variant on the pindel record reference string and
                           is used to grab variant sequence from the read string.
.IP "calmd Calculate the \s-1MD\s0 and \s-1NM\s0 tags based on new Cigar string, seq and genomic location Added to deal with problem in samtools calmd where split reads are handled poorly" 4
.IX Item "calmd Calculate the MD and NM tags based on new Cigar string, seq and genomic location Added to deal with problem in samtools calmd where split reads are handled poorly"
\&\f(CW@param1\fR chr             \- chromosome name.
.Sp
\&\f(CW@param2\fR start           \- genomic start position of the read. If the read is soft clipped the start position should take this into account.
.Sp
\&\f(CW@param3\fR cigar           \- array_ref containing cigar components of the read.
.Sp
\&\f(CW@param4\fR seq_ref         \- a string_ref of the read sequence.
.Sp
\&\f(CW@param5\fR reference_ref   \- a string_ref of the reference sequence. This sequence must cover the entirety of the read and any deletions.
.Sp
\&\f(CW@param6\fR reference_start \- genomic start position of the reference sequence.
.Sp
\&\f(CW@returns\fR                \- (\s-1MD\s0 string, \s-1NM\s0 string).
.SH "POD ERRORS"
.IX Header "POD ERRORS"
Hey! \fBThe above document had some coding errors, which are explained below:\fR
.IP "Around line 87:" 4
.IX Item "Around line 87:"
Unknown directive: =head
.IP "Around line 142:" 4
.IX Item "Around line 142:"
Unknown directive: =head
.IP "Around line 215:" 4
.IX Item "Around line 215:"
Unknown directive: =head
.IP "Around line 282:" 4
.IX Item "Around line 282:"
Unknown directive: =head
.IP "Around line 360:" 4
.IX Item "Around line 360:"
Unknown directive: =head
.IP "Around line 405:" 4
.IX Item "Around line 405:"
Unknown directive: =head
.IP "Around line 441:" 4
.IX Item "Around line 441:"
Unknown directive: =head
.IP "Around line 477:" 4
.IX Item "Around line 477:"
Unknown directive: =head
.IP "Around line 586:" 4
.IX Item "Around line 586:"
\&'=item' outside of any '=over'
